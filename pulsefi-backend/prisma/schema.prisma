generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  isVerified    Boolean        @default(false) @map("is_verified")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  portfolios    Portfolio[]
  profile       Profile?
  refreshTokens RefreshToken[]

  @@map("users")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  avatar    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Portfolio {
  id           String    @id @default(uuid())
  name         String
  currency     String    @default("USD")
  totalBalance Float     @default(0) @map("total_balance")
  userId       String    @map("user_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  accounts     Account[]
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolios")
}

model Account {
  id           String        @id @default(uuid())
  name         String
  type         String
  balance      Float         @default(0)
  currency     String        @default("USD")
  portfolioId  String        @map("portfolio_id")
  parentId     String?       @map("parent_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  parent       Account?      @relation("AccountToSubAccount", fields: [parentId], references: [id])
  subAccounts  Account[]     @relation("AccountToSubAccount")
  portfolio    Portfolio     @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("accounts")
}

model Category {
  id           String        @id @default(cuid())
  name         String
  type         String
  color        String        @default("#007AFF")
  icon         String        @default("category")
  description  String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]

  @@unique([name, type])
  @@map("categories")
}

model Transaction {
  id          String    @id @default(uuid())
  type        String
  amount      Float
  category    String
  description String?
  date        DateTime
  accountId   String    @map("account_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  categoryId  String?
  account     Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  categoryRef Category? @relation(fields: [categoryId], references: [id])

  @@map("transactions")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}
